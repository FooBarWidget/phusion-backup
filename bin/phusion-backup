#!/usr/bin/env ruby
# encoding: binary
require 'rubygems'
gem 'activesupport', '~> 2.3.0'
require 'etc'
require 'optparse'
require 'active_support'

module PhusionBackup

module TUI
protected
	DEFAULT_TERMINAL_COLORS = "\e[0m\e[37m\e[40m"
	
	def stdout
		@stdout || STDOUT
	end
	
	def print(text)
		stdout.write(substitute_color_tags(text))
		stdout.flush
	end

	def puts(text = nil)
		if text
			stdout.puts(substitute_color_tags(text))
		else
			stdout.puts
		end
		stdout.flush
	end

	def puts_error(text)
		STDERR.puts(substitute_color_tags("<red>#{text}</red>"))
		STDERR.flush
	end
	
	def substitute_color_tags(data)
		data = data.to_s
		data = data.gsub(%r{<b>(.*?)</b>}m, "\e[1m\\1#{DEFAULT_TERMINAL_COLORS}")
		data.gsub!(%r{<red>(.*?)</red>}m, "\e[1m\e[31m\\1#{DEFAULT_TERMINAL_COLORS}")
		data.gsub!(%r{<green>(.*?)</green>}m, "\e[1m\e[32m\\1#{DEFAULT_TERMINAL_COLORS}")
		data.gsub!(%r{<yellow>(.*?)</yellow>}m, "\e[1m\e[33m\\1#{DEFAULT_TERMINAL_COLORS}")
		data.gsub!(%r{<banner>(.*?)</banner>}m, "\e[33m\e[44m\e[1m\\1#{DEFAULT_TERMINAL_COLORS}")
		return data
	end
end

class Server < Struct.new(:hostname, :dir)
end

class Core
	ROOT = File.expand_path(File.dirname(__FILE__) + "/..")
	MIN_BACKUPS_TO_KEEP = 5
	MAX_BACKUP_AGE = 3.months
	MAX_BACKUP_AGE_STR = "3 months"
	
	include TUI
	
	def initialize(backupdirs)
		@backupdirs = backupdirs
	end
	
	def servers
		results = []
		@backupdirs.each do |dir|
			next if !File.exist?(dir)
			Dir.foreach(dir) do |hostname|
				next if hostname =~ /^\./
				fullname = "#{dir}/#{hostname}"
				if File.directory?(fullname)
					results << Server.new(hostname, File.expand_path(fullname))
				end
			end
		end
		return results
	end
	
	def find_server(hostname_or_dir)
		fulldir = File.expand_path(hostname_or_dir)
		return servers.find { |s| s.hostname == hostname_or_dir || s.dir == fulldir }
	end
	
	def generate(dir)
		copy_file_no_overwrite("#{ROOT}/resources/default-files.txt", "#{dir}/files.txt")
		copy_file_no_overwrite("#{ROOT}/resources/default-install-script.sh", "#{dir}/install-script.sh")
		copy_file_no_overwrite("#{ROOT}/resources/default-postrestore.sh", "#{dir}/postrestore.sh")
	end
	
	def run_backup(server)
		if !File.exist?("#{server.dir}/files.txt")
			puts "<red>No `files.txt` found in this backup directory.</red>"
			puts
			puts "Each backup directory must have such a file, in which you " +
				"specify which files must be backed up. You can create " +
				"a default one with:"
			puts
			puts "  <b>phusion-backup --generate #{server.dir}</b>"
			exit 1
		end
		
		filename = create_globbing_filelist(server)
		begin
			sh!('rdiff-backup',
				'-v5',
				'--print-statistics',
				'--exclude-sockets',
				'--include-globbing-filelist', filename,
				"root@#{server.hostname}::/",
				"#{server.dir}/data")
			delete_old_backups(server)
		ensure
			File.unlink(filename)
		end
	end
	
	def delete_old_backups(server)
		return if !File.exist?(server.dir)
		command = "rdiff-backup --list-increments --parsable-output \"#{server.dir}/data\""
		increments = `#{command}`
		if $?.exitstatus != 0
			puts_error "The command `#{command}` failed."
			raise CommandError
		end
		
		timestamps = []
		increments.split("\n").each do |line|
			if line =~ /^(\d+) directory$/
				timestamps << $1.to_i
			else
				puts_error "The command `#{command}` returned an unrecognized output line: #{line.inspect}"
				exit 1
			end
		end
		
		puts "<b>Checking whether any old backups need to be deleted...</b>"
		if timestamps.size > MIN_BACKUPS_TO_KEEP
			nbackups = timestamps.size
			ndelete = 0
			
			timestamps.sort! { |a, b| b <=> a }
			cleanable_timestamps = timestamps.dup
			MIN_BACKUPS_TO_KEEP.times do
				cleanable_timestamps.pop
			end
			cleanable_timestamps.each do |timestamp|
				if timestamp < MAX_BACKUP_AGE.ago.to_i
					ndelete += 1
				end
			end
			
			if ndelete == 0
				puts "Nothing deleted because although there are more than " +
					"#{MIN_BACKUPS_TO_KEEP} backups (namely #{nbackups}), " +
					"none of them are older than #{MAX_BACKUP_AGE_STR}."
			else
				puts "<yellow>Deleting backups older than #{MAX_BACKUP_AGE_STR}, excluding " +
					"the #{MIN_BACKUPS_TO_KEEP} most recent backups.</yellow>"
				timestamps.each do |timestamp|
					if timestamp < MAX_BACKUP_AGE.ago.to_i
						action = "Delete"
					else
						action = "Keep"
					end
					time = Time.at(timestamp)
					relative_time = distance_of_time_in_words(Time.now, time, true)
					printf " * %s %-30s %s\n",
						time,
						"(#{relative_time} ago)",
						action
				end
				puts
				sh!("rdiff-backup", "--remove-older-than",
					MAX_BACKUP_AGE.ago.to_i.to_s, "--force",
					"#{server.dir}/data")
			end
		else
			puts "No old backups need to be deleted. Only #{timestamps.size} backups " +
				"have been made so far. For phusion-backup to consider deleting " +
				"old backups, more than #{MIN_BACKUPS_TO_KEEP} backups must exist."
		end
	end
	
	def run_restore(server)
		if !File.exist?("#{server.dir}/data")
			puts "<red>No `data` subdirectory found in this backup directory.</red>"
			puts
			puts "This means that you either don't have a backup, or you specified the wrong directory."
			exit 1
		end
		
		if File.exist?("#{server.dir}/install-script.sh")
			script = "/tmp/script-#{Process.pid}.txt"
			begin
				File.open(script, 'w') do |f|
					f.puts File.read("#{ROOT}/resources/header.sh")
					f.puts File.read("#{server.dir}/install-script.sh")
					f.puts File.read("#{ROOT}/resources/footer.sh")
				end
				sh! "scp", script, "root@#{server.hostname}:/tmp/script.sh"
				sh! "ssh", "-t", "root@#{server.hostname}",
					"bash /tmp/script.sh && " +
					"rm -f /tmp/script.sh"
			ensure
				File.unlink(script) rescue nil
			end
		end
		
		sh! 'ssh', "root@#{server.hostname}",
			"mkdir -p /var/cache/phusion-backup && " +
			"chmod 700 /var/cache/phusion-backup && " +
			"mkdir -p /var/cache/phusion-backup/data"
		sh! 'rdiff-backup',
			'--restore-as-of', 'now',
			'--force',
			'-v5',
			'--print-statistics',
			"#{server.dir}/data",
			"root@#{server.hostname}::/var/cache/phusion-backup/data"
		sh! 'ssh', "root@#{server.hostname}",
			"rsync -avz /var/cache/phusion-backup/data/ /"
		
		if File.exist?("#{server.dir}/postrestore.sh")
			script = "/tmp/script-#{Process.pid}.txt"
			begin
				File.open(script, 'w') do |f|
					f.puts File.read("#{ROOT}/resources/header.sh")
					f.puts File.read("#{server.dir}/postrestore.sh")
					f.puts File.read("#{ROOT}/resources/footer.sh")
				end
				sh! "scp", script, "root@#{server.hostname}:/tmp/script.sh"
				sh! "ssh", "-t", "root@#{server.hostname}",
					"bash /tmp/script.sh && " +
					"rm -f /tmp/script.sh"
			ensure
				File.unlink(script) rescue nil
			end
		end
	end

private
	class CommandError < StandardError
	end
	
	def sh(*args)
		puts "# #{args.join(' ')}"
		result = system(*args)
		if result
			return true
		elsif $?.signaled? && $?.termsig == Signal.list["INT"]
			raise Interrupt
		else
			return false
		end
	end

	def sh!(*args)
		if !sh(*args)
			puts_error "*** Command failed: #{args.join(' ')}"
			raise CommandError
		end
	end
	
	def copy_file_no_overwrite(source, target)
		if File.exist?(target)
			puts " [CREATE] #{target}"
			puts "          <yellow>File already exists. Not overwritten.</yellow>"
		else
			dir = File.dirname(target)
			if !File.exist?(dir)
				puts " [MKDIR]  #{dir}"
				Dir.mkdir(dir)
			end
			puts " [CREATE] #{target}"
			File.open(target, "w") do |f|
				f.write(File.read(source))
			end
		end
	end
	
	def create_globbing_filelist(server)
		filename = "/tmp/phusion-backup-#{Process.pid}.txt"
		File.open(filename, 'a') do |target|
			File.open("#{server.dir}/files.txt", 'r') do |source|
				while !source.eof?
					line = source.readline.sub(/^#.*/, '')
					target.puts(line)
				end
			end
			target.puts "- **"
		end
		return filename
	end
	
	def distance_of_time_in_words(from_time, to_time = 0, include_seconds = false)
		from_time = from_time.to_time if from_time.respond_to?(:to_time)
		to_time = to_time.to_time if to_time.respond_to?(:to_time)
		distance_in_minutes = (((to_time - from_time).abs)/60).round
		distance_in_seconds = ((to_time - from_time).abs).round

		case distance_in_minutes
		when 0..1
			return (distance_in_minutes == 0) ? 'less than a minute' : '1 minute' unless include_seconds
			case distance_in_seconds
			when 0..4   then 'less than 5 seconds'
			when 5..9   then 'less than 10 seconds'
			when 10..19 then 'less than 20 seconds'
			when 20..39 then 'half a minute'
			when 40..59 then 'less than a minute'
			else             '1 minute'
			end

		when 2..44           then "#{distance_in_minutes} minutes"
		when 45..89          then 'about 1 hour'
		when 90..1439        then "about #{(distance_in_minutes.to_f / 60.0).round} hours"
		when 1440..2879      then '1 day'
		when 2880..43199     then "#{(distance_in_minutes / 1440).round} days"
		when 43200..86399    then 'about 1 month'
		when 86400..525599   then "#{(distance_in_minutes / 43200).round} months"
		when 525600..1051199 then 'about 1 year'
		else                      "over #{(distance_in_minutes / 525600).round} years"
		end
	end
end

class App
	include TUI
	
	def initialize(argv)
		@argv = argv.dup
		@stdout = STDOUT
	end
	
	def run
		options = {}
		parser = OptionParser.new do |opts|
			nl = "\n" << (" " * 37)
			opts.banner = "General usage: phusion-backup <options...>"
			opts.separator ""
			
			opts.separator "Backup one or more servers:"
			opts.separator "   phusion-backup hostname1 [hostname2 ...]"
			opts.separator ""
			opts.separator "   `hostnameX' is either a host name or directory name."
			opts.separator ""
			
			opts.separator "Display all servers that phusion-backup knows about:"
			opts.separator "   phusion-backup --list"
			opts.separator ""
			
			opts.separator "Restore the most recent backup:"
			opts.separator "   phusion-backup --restore hostname"
			opts.separator ""
			
			opts.separator "Please read the README for tutorial!"
			opts.separator ""
			opts.separator "Available options:"
			opts.on("--list",
			        "Show all servers that phusion-backup knows#{nl}" +
			        "about.") do
				options[:list] = true
			end
			opts.on("--generate DIR", String,
			        "Generate default files (like files.txt)#{nl}" +
			        "in the given directory.") do |dir|
				options[:generate] = dir
			end
			opts.on("--restore",
			        "Enable restore mode") do
				options[:restore] = true
			end
			opts.on("-h", "--help", "Show this help message.") do
				options[:help] = true
			end
		end
		begin
			parser.parse!(@argv)
		rescue OptionParser::ParseError => e
			puts e
			puts
			puts "Please see '--help' for valid options."
			exit 1
		end

		if options[:help]
			puts parser
			return 0
		end
		
		@core = Core.new(["#{Core::ROOT}/backups", "#{home_dir}/Backups"])
		
		if options[:list]
			@core.servers.each do |server|
				printf "%-35s %s\n", server.hostname, server.dir
			end
			return 0
		elsif options[:generate]
			@core.generate(options[:generate])
			return 0
		elsif options[:restore]
			run_in_restore_mode
			return 0
		else
			run_in_backup_mode
			return 0
		end
	rescue Core::CommandError
		return 1
	end

private
	def run_in_backup_mode
		if @argv.empty?
			if @core.servers.empty?
				puts_error "You must create a backup specification first. Please read README for tutorial."
			else
				puts_error "Please specify the server you want to backup:"
				puts
				@core.servers.each do |server|
					puts "  phusion-backup #{server.hostname}"
				end
				puts
				puts "For full usage please see `phusion-backup --help` and the README."
			end
			return 1
		end
		
		servers = []
		@argv.each do |name|
			server = @core.find_server(name)
			if !server
				puts_error "This program doesn't know anything about the server '#{name}'."
				puts "If you've misspelled the name, please correct it."
				puts "If you want to see a list of available servers that this programs knows about, run <b>phusion-backup --list</b>."
				puts "For general, please refer to the README."
				exit 1
			end
			servers << server
		end
		
		servers.each do |server|
			puts "<banner>Backing up #{server.hostname} - #{server.dir}</banner>"
			@core.run_backup(server)
			puts
		end
	end
	
	def run_in_restore_mode
		if @argv.empty?
			if @core.servers.empty?
				puts_error "Please specify the host name of the server you want to backup, " +
					"or specify the path to the backup directory."
			else
				puts_error "Please specify the server you want to restore:"
				puts
				@core.servers.each do |server|
					puts "  phusion-backup --restore #{server.hostname}"
				end
				puts
				puts "For full usage please see `phusion-backup --help` and the README."
			end
			return 1
		elsif @argv.size > 1
			puts_error "You can only specify one server when using --restore."
			return 1
		end
		
		server = @core.find_server(@argv[0])
		if !server
			puts_error "This program doesn't know anything about the server '#{@argv[0]}'."
			puts "If you've misspelled the name, please correct it."
			puts "If you want to see a list of available servers that this programs knows about, run <b>phusion-backup --list</b>."
			puts "For general, please refer to the README."
			exit 1
		end
		@core.run_restore(server)
	end
	
	def home_dir
		return Etc.getpwuid(Process.uid).dir
	end
end

end

exit(PhusionBackup::App.new(ARGV).run)